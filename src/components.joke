(ns components)

(defn <layout>
  [{:keys [:title]} & body]
  [:html
   [:head
    [:title title]
    [:meta {:name "viewport" :content "width=device-width, initial-scale=1.0"}]
    [:meta {:charset "UTF-8"}]
    [:link {:rel "stylesheet" :href "styles.css"}]
    [:link {:rel "preconnect" :href "https://fonts.googleapis.com"}]
    [:link {:rel "preconnect" :href "https://fonts.gstatic.com" :crossorigin true}]
    [:link {:href "https://fonts.googleapis.com/css2?family=Play:wght@400;700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" :rel "stylesheet"}]
    ; [:style "@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap')"]
    ; [:style "@import url('https://fonts.googleapis.com/css2?family=Play:wght@400;700&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap')"]
    [:script {:src "https://unpkg.com/htmx.org@1.9.10"}]
    [:script {:src "https://unpkg.com/htmx.org@1.9.11/dist/ext/json-enc.js"}]]
   body])

(defn <card>
  [attributes & body]
  (let [title (:title attributes)
        attributes (dissoc attributes :title)]
    [:div.card attributes
     [:div.card-title title]
     body]))

(defn <roll-def>
  [{:keys [hit dmg icon label]}]
  [:form {:hx-ext "json-enc"}
   [:input {:type "hidden" :name "icon" :value icon}]
   [:input {:type "hidden" :name "label" :value label}]
   [:input {:type "hidden" :name "hit" :value hit}]
   [:input {:type "hidden" :name "dmg" :value dmg}]
   (<card>
    {:title label
     :hx-trigger "click"
     :hx-post "/roll"
     :hx-target ".roll-results-list"
     :hx-swap "beforeend"}
    [:div.roll-def
     [:div.roll-def-icon [:img {:src icon}]]
     (when-not (= "" hit)
       [:div.roll-def-hit.hit-icon hit])
     (when-not (= "" dmg)
       [:div.roll-def-dmg.dmg-icon dmg])
    ; [:button.roll-def-advantage {:hx-trigger "click consume" :hx-post "/roll-advantage"} "A"]
     [:button.roll-def-disadvantage
      {:hx-trigger "click consume" :hx-post "/roll-disadvantage"} "A/D"]])])

(defn <roll-def-list>
  [roll-defs]
  [:div.roll-def-list
   (for [roll-def roll-defs]
     (<roll-def> roll-def))])

(defn <roll-result-hit-roll>
  [{:keys [roll-result primary]}]
  [:div.roll-result-hit-roll
   {:class (if primary
             "roll-result-hit-roll-primary"
             "roll-result-hit-roll-secondary")}
   [:span.roll-result-hit-roll-roll (:roll roll-result)]
   [:span.roll-result-hit-roll-explain
    (str "(" (:explain roll-result) ")")]])

(defn <roll-result>
  [{:keys [label icon hit-rolls dmg-roll type]}]
  (let [elem-id (str "roll-result-" (rand-int 1000000))]
    (<card>
     {:id elem-id
      :title label
      :style "background-color: lightgray;"}
     [:div.roll-result
      {:onClick (str "document.getElementById('" elem-id "').remove()")}

      [:div.roll-result-icon [:img {:src icon}]]
      (let [[primary secondary] hit-rolls]
        (list
         (when primary (<roll-result-hit-roll> {:roll-result primary :primary true}))
         (when secondary (<roll-result-hit-roll> {:roll-result secondary :primary false}))))
      (when dmg-roll
        [:span.roll-result-dmg-roll-roll (:roll dmg-roll)]
        [:span.roll-result-dmg-roll-explain (str "(" (:explain dmg-roll) ")")])])))

(defn <recent-rolls>
  [roll-results]
  [:div.roll-results-list
   (for [roll-result roll-results]
     (<roll-result> roll-result))])
