(ns app)

(require 'handler-dispatch)
(require '[handler-dispatch :refer [handle]])
(require '[components :as c])

(require '(joker [hiccup :refer [html]]))
(require '(joker [strconv :refer [parse-int]]))
(require '(joker [json :as json]))
(require '(joker [string :as string]))
(require '(joker [walk :refer [keywordize-keys]]))

(def roll-def
  {:hit "1d20+3"
   :label "Longsword"
   :icon "icons/Weapon_and_Tools/Shovel.png"
   :dmg "1d8+1"})

(def advantage-result
  {:label "Longsword"
   :icon "icons/Weapon_and_Tools/Shovel.png"
   :type :advantage
   :hit-rolls [{:roll 18 :explain "(15+3)"}
               {:roll 10 :explain "(7+3)"}]

   :dmg-roll {:roll 6 :explain "(5+1)"}})

(def regular-roll-result
  {:label "Longsword"
   :icon "icons/Weapon_and_Tools/Shovel.png"
   :type :regular
   :hit-rolls [{:roll 15 :explain "(12+3)"}]
   :dmg-roll {:roll 6 :explain "(5+1)"}})

(def disadvantage-result
  {:label "Longsword"
   :icon "icons/Weapon_and_Tools/Shovel.png"
   :type :disadvantage
   :hit-rolls [{:roll 18 :explain "(15+3)"}
               {:roll 10 :explain "(7+3)"}]

   :dmg-roll {:roll 6 :explain "(5+1)"}})

(defmethod handle [:get "/"]
  [_request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body
   (html
    (c/<layout>
     {:title "D&D Quick Roll"}
     [:div
      [:div.app
       [:div
        [:h1.title "D&D Quick Roll "
         [:span.dice-a "⚁"]
         [:span.dice-b "⚄"]
       ;; [:div.dice-top.dice-a "⚁"]
       ;;[:div.dice-top.dice-b "⚄"]
         ]]
       (c/<roll-def-list>
        [{:label "Crossbow, light"
          :icon "icons/Weapon_and_Tools/Bow.png"
          :hit "1d20+4"
          :dmg "1d8+2"}
         {:label "Shovel"
          :icon "icons/Weapon_and_Tools/Shovel.png"
          :hit "1d20+2"
          :dmg "4d12+2"}
         {:label "Dagger"
          :icon "icons/Weapon_and_Tools/Knife.png"
          :hit "1d20+4"
          :dmg "2d4+2"}
         {:label "Vicious Mockery"
          :icon "icons/Misc/Heart.png"
          :hit ""
          :dmg "1d4"}
         {:label "Healing Word"
          :icon "icons/Potion/Red Potion.png"
          :hit ""
          :dmg "1d4+4"}
         {:label "Call of Cathulu"
          :icon "icons/Monster Part/Monster Eye.png"
          :hit "1d100"
          :dmg ""}])]
      (c/<recent-rolls> [])]))})

(defn parse-roll-spec
  [spec]
  (let [[_ dice-count dice-sides modifier]
        (re-matches #"(\d+)d(\d+)([+-]\d+)?" spec)]
    {:dice-count (parse-int dice-count 0 8)
     :dice-sides (parse-int dice-sides 0 8)
     :modifier-str (or modifier "")
     :modifier (if (or
                    (= nil modifier)
                    (= "" modifier))
                 0
                 (parse-int modifier 0 8))}))

(defn roll-spec
  [spec]
  (if (= "" spec)
    ;; TODO: probably need a validate spec we should use instead
    nil
    (let [{:keys [dice-count dice-sides modifier modifier-str]} (parse-roll-spec spec)
          results (for [_ (range dice-count)]
                    (inc (rand-int dice-sides)))]
      {:roll (+ (reduce + results) modifier)
       :explain (str (string/join " +" results) modifier-str)})))

(defn parse-json-body
  [request]
  (some-> request :body json/read-string keywordize-keys))

(defmethod handle [:post "/roll"]
  [request]
  (let [{:keys [hit dmg icon label]} (parse-json-body request)]
    {:status 200
     :headers {"Content-Type" "text/html"}
     :body
     (html
      (c/<roll-result>
       {:label label
        :icon icon
        :hit-rolls (remove nil? [(roll-spec hit)])
        :dmg-roll (roll-spec dmg)
        :type "regular"}))}))

; (defmethod handle [:post "/roll-advantage"]
;   [request]
;   (let [{:keys [hit dmg icon label]} (parse-json-body request)
;         rolls (if (= "" hit)
;                 []
;                 (reverse (sort-by :roll
;                                   [(roll-spec hit)
;                                    (roll-spec hit)])))]
;     {:status 200
;      :headers {"Content-Type" "text/html"}
;      :body
;      (html
;       (c/<roll-result>
;        {:label label
;         :icon icon
;         :hit-rolls rolls
;         :dmg-roll (roll-spec dmg)
;         :type "advantage"}))}))

(defmethod handle [:post "/roll-disadvantage"]
  [request]
  (let [{:keys [hit dmg icon label]} (parse-json-body request)
        rolls (if (= "" hit)
                []
                [(roll-spec hit)
                 (roll-spec hit)])]
    {:status 200
     :headers {"Content-Type" "text/html"}
     :body
     (html
      (c/<roll-result>
       {:label label
        :icon icon
        :hit-rolls rolls
        :dmg-roll (roll-spec dmg)
        :type "disadvantage"}))}))
